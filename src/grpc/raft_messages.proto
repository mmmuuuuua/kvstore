syntax = "proto2";

package raft_messages;

message LogEntry {
    // `index` and `term` are set by `do_log`.
    required int64 index = 1;
    required uint64 term = 2;
    // By default set to 0, as normal log
    required int32 command = 3;
    optional bytes data = 4;
    ////ctx
    optional string key = 5;
    optional string value = 6;

	optional int64 requestid = 7;
    optional int64 expirerequestid = 8;
    //optional int64 clientid=9;
}

message AppendEntriesRequest {
    required string name = 1;
    required uint64 term = 2;
    // prev_log_index contains Leader's knowledge of peer's state of log entry. Maybe not up-to-date.
    // ref. `RaftNode::do_append_entries`
    required int64 prev_log_index = 3;
    required uint64 prev_log_term = 4;
    required int64 leader_commit = 5;
    repeated LogEntry entries = 6;
    required uint64 time = 7;
    required uint64 seq = 8;
    required bool initial = 9;
}

message AppendEntriesResponse {
    required string name = 1;
    required uint64 term = 2;
    required bool success = 3;
    required int64 last_log_index = 4;
    required uint64 last_log_term = 5;
    required uint64 time = 6;
    required uint64 seq = 7;
}

message RequestVoteRequest {
    required string name = 1;
    required uint64 term = 2;
    required int64 last_log_index = 3;
    required uint64 last_log_term = 4;
    required uint64 time = 5;
    required uint64 seq = 6;
    required bool initial = 7;
    required bool is_prevote = 8;
}

message RequestVoteResponse {
    required string name = 1;
    required uint64 term = 2;
    required bool vote_granted = 3;
    required uint64 time = 4;
    required uint64 seq = 5;
}

message InstallSnapshotRequest {
    required uint64 term = 1;
    required string name = 2;
    required int64 last_included_index = 3;
    required int64 last_included_term = 4;
    required bytes data = 6;
    required uint64 time = 7;
    required uint64 seq = 8;
    required bool initial = 9;
}

message InstallSnapshotResponse{
    required uint64 term = 1;
    required string name = 2;
    required int64 last_included_index = 3;
    required int64 last_included_term = 4;
    required bool success = 5;
    required uint64 time = 6;
    required uint64 seq = 7;
}

message ConfRecord{
    required string peers = 1;
    required int64 index = 2;
    required int64 index2 = 3;
    required int64 state = 4;
}

message PersistRecord{
    required uint64 term = 1;
    required string name = 2;
    required string vote_for = 3;
    repeated LogEntry entries = 4;
    optional ConfRecord conf_record = 5;
    required uint64 last_seq = 6;
}

service RaftMessages {
    rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse) {}
    rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
    rpc InstallSnapshot (InstallSnapshotRequest) returns (InstallSnapshotResponse) {}
}

service RaftStreamMessages {
    rpc RequestVote (stream RequestVoteRequest) returns (stream RequestVoteResponse) {}
    rpc AppendEntries (stream AppendEntriesRequest) returns (stream AppendEntriesResponse) {}
    rpc InstallSnapshot (stream InstallSnapshotRequest) returns (stream InstallSnapshotResponse) {}
}


