// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: client_messages.proto

#include "client_messages.pb.h"
#include "client_messages.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace client_messages {

static const char* ClientMessages_method_names[] = {
  "/client_messages.ClientMessages/HandleClient",
};

std::unique_ptr< ClientMessages::Stub> ClientMessages::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientMessages::Stub> stub(new ClientMessages::Stub(channel));
  return stub;
}

ClientMessages::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_HandleClient_(ClientMessages_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientMessages::Stub::HandleClient(::grpc::ClientContext* context, const ::client_messages::HandleClientRequest& request, ::client_messages::HandleClientResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HandleClient_, context, request, response);
}

void ClientMessages::Stub::experimental_async::HandleClient(::grpc::ClientContext* context, const ::client_messages::HandleClientRequest* request, ::client_messages::HandleClientResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleClient_, context, request, response, std::move(f));
}

void ClientMessages::Stub::experimental_async::HandleClient(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::client_messages::HandleClientResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HandleClient_, context, request, response, std::move(f));
}

void ClientMessages::Stub::experimental_async::HandleClient(::grpc::ClientContext* context, const ::client_messages::HandleClientRequest* request, ::client_messages::HandleClientResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleClient_, context, request, response, reactor);
}

void ClientMessages::Stub::experimental_async::HandleClient(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::client_messages::HandleClientResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HandleClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::client_messages::HandleClientResponse>* ClientMessages::Stub::AsyncHandleClientRaw(::grpc::ClientContext* context, const ::client_messages::HandleClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::client_messages::HandleClientResponse>::Create(channel_.get(), cq, rpcmethod_HandleClient_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::client_messages::HandleClientResponse>* ClientMessages::Stub::PrepareAsyncHandleClientRaw(::grpc::ClientContext* context, const ::client_messages::HandleClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::client_messages::HandleClientResponse>::Create(channel_.get(), cq, rpcmethod_HandleClient_, context, request, false);
}

ClientMessages::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientMessages_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientMessages::Service, ::client_messages::HandleClientRequest, ::client_messages::HandleClientResponse>(
          std::mem_fn(&ClientMessages::Service::HandleClient), this)));
}

ClientMessages::Service::~Service() {
}

::grpc::Status ClientMessages::Service::HandleClient(::grpc::ServerContext* context, const ::client_messages::HandleClientRequest* request, ::client_messages::HandleClientResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace client_messages

