// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fmessages_2eproto;
namespace client_messages {
class HandleClientRequest;
class HandleClientRequestDefaultTypeInternal;
extern HandleClientRequestDefaultTypeInternal _HandleClientRequest_default_instance_;
class HandleClientResponse;
class HandleClientResponseDefaultTypeInternal;
extern HandleClientResponseDefaultTypeInternal _HandleClientResponse_default_instance_;
}  // namespace client_messages
PROTOBUF_NAMESPACE_OPEN
template<> ::client_messages::HandleClientRequest* Arena::CreateMaybeMessage<::client_messages::HandleClientRequest>(Arena*);
template<> ::client_messages::HandleClientResponse* Arena::CreateMaybeMessage<::client_messages::HandleClientResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace client_messages {

// ===================================================================

class HandleClientRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_messages.HandleClientRequest) */ {
 public:
  HandleClientRequest();
  virtual ~HandleClientRequest();

  HandleClientRequest(const HandleClientRequest& from);
  HandleClientRequest(HandleClientRequest&& from) noexcept
    : HandleClientRequest() {
    *this = ::std::move(from);
  }

  inline HandleClientRequest& operator=(const HandleClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandleClientRequest& operator=(HandleClientRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandleClientRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandleClientRequest* internal_default_instance() {
    return reinterpret_cast<const HandleClientRequest*>(
               &_HandleClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HandleClientRequest* other);
  friend void swap(HandleClientRequest& a, HandleClientRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HandleClientRequest* New() const final {
    return CreateMaybeMessage<HandleClientRequest>(nullptr);
  }

  HandleClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandleClientRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandleClientRequest& from);
  void MergeFrom(const HandleClientRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandleClientRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client_messages.HandleClientRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fmessages_2eproto);
    return ::descriptor_table_client_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string request_type = 1;
  bool has_request_type() const;
  void clear_request_type();
  static const int kRequestTypeFieldNumber = 1;
  const std::string& request_type() const;
  void set_request_type(const std::string& value);
  void set_request_type(std::string&& value);
  void set_request_type(const char* value);
  void set_request_type(const char* value, size_t size);
  std::string* mutable_request_type();
  std::string* release_request_type();
  void set_allocated_request_type(std::string* request_type);

  // required string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // optional string value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // optional int64 requestid = 4;
  bool has_requestid() const;
  void clear_requestid();
  static const int kRequestidFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 expirerequestid = 5;
  bool has_expirerequestid() const;
  void clear_expirerequestid();
  static const int kExpirerequestidFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 expirerequestid() const;
  void set_expirerequestid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 clientid = 6;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientidFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int64 clientid() const;
  void set_clientid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:client_messages.HandleClientRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int64 expirerequestid_;
  ::PROTOBUF_NAMESPACE_ID::int64 clientid_;
  friend struct ::TableStruct_client_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class HandleClientResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_messages.HandleClientResponse) */ {
 public:
  HandleClientResponse();
  virtual ~HandleClientResponse();

  HandleClientResponse(const HandleClientResponse& from);
  HandleClientResponse(HandleClientResponse&& from) noexcept
    : HandleClientResponse() {
    *this = ::std::move(from);
  }

  inline HandleClientResponse& operator=(const HandleClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandleClientResponse& operator=(HandleClientResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandleClientResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandleClientResponse* internal_default_instance() {
    return reinterpret_cast<const HandleClientResponse*>(
               &_HandleClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HandleClientResponse* other);
  friend void swap(HandleClientResponse& a, HandleClientResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HandleClientResponse* New() const final {
    return CreateMaybeMessage<HandleClientResponse>(nullptr);
  }

  HandleClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandleClientResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandleClientResponse& from);
  void MergeFrom(const HandleClientResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandleClientResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "client_messages.HandleClientResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fmessages_2eproto);
    return ::descriptor_table_client_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string leader_name = 2;
  bool has_leader_name() const;
  void clear_leader_name();
  static const int kLeaderNameFieldNumber = 2;
  const std::string& leader_name() const;
  void set_leader_name(const std::string& value);
  void set_leader_name(std::string&& value);
  void set_leader_name(const char* value);
  void set_leader_name(const char* value, size_t size);
  std::string* mutable_leader_name();
  std::string* release_leader_name();
  void set_allocated_leader_name(std::string* leader_name);

  // optional string value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // required int32 flag = 1;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:client_messages.HandleClientResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  friend struct ::TableStruct_client_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HandleClientRequest

// required string request_type = 1;
inline bool HandleClientRequest::has_request_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandleClientRequest::clear_request_type() {
  request_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HandleClientRequest::request_type() const {
  // @@protoc_insertion_point(field_get:client_messages.HandleClientRequest.request_type)
  return request_type_.GetNoArena();
}
inline void HandleClientRequest::set_request_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_messages.HandleClientRequest.request_type)
}
inline void HandleClientRequest::set_request_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  request_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:client_messages.HandleClientRequest.request_type)
}
inline void HandleClientRequest::set_request_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  request_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_messages.HandleClientRequest.request_type)
}
inline void HandleClientRequest::set_request_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  request_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_messages.HandleClientRequest.request_type)
}
inline std::string* HandleClientRequest::mutable_request_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:client_messages.HandleClientRequest.request_type)
  return request_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HandleClientRequest::release_request_type() {
  // @@protoc_insertion_point(field_release:client_messages.HandleClientRequest.request_type)
  if (!has_request_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return request_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HandleClientRequest::set_allocated_request_type(std::string* request_type) {
  if (request_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_type);
  // @@protoc_insertion_point(field_set_allocated:client_messages.HandleClientRequest.request_type)
}

// required string key = 2;
inline bool HandleClientRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HandleClientRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HandleClientRequest::key() const {
  // @@protoc_insertion_point(field_get:client_messages.HandleClientRequest.key)
  return key_.GetNoArena();
}
inline void HandleClientRequest::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_messages.HandleClientRequest.key)
}
inline void HandleClientRequest::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:client_messages.HandleClientRequest.key)
}
inline void HandleClientRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_messages.HandleClientRequest.key)
}
inline void HandleClientRequest::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_messages.HandleClientRequest.key)
}
inline std::string* HandleClientRequest::mutable_key() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:client_messages.HandleClientRequest.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HandleClientRequest::release_key() {
  // @@protoc_insertion_point(field_release:client_messages.HandleClientRequest.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HandleClientRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:client_messages.HandleClientRequest.key)
}

// optional string value = 3;
inline bool HandleClientRequest::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HandleClientRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HandleClientRequest::value() const {
  // @@protoc_insertion_point(field_get:client_messages.HandleClientRequest.value)
  return value_.GetNoArena();
}
inline void HandleClientRequest::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_messages.HandleClientRequest.value)
}
inline void HandleClientRequest::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:client_messages.HandleClientRequest.value)
}
inline void HandleClientRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_messages.HandleClientRequest.value)
}
inline void HandleClientRequest::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_messages.HandleClientRequest.value)
}
inline std::string* HandleClientRequest::mutable_value() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:client_messages.HandleClientRequest.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HandleClientRequest::release_value() {
  // @@protoc_insertion_point(field_release:client_messages.HandleClientRequest.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HandleClientRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:client_messages.HandleClientRequest.value)
}

// optional int64 requestid = 4;
inline bool HandleClientRequest::has_requestid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HandleClientRequest::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HandleClientRequest::requestid() const {
  // @@protoc_insertion_point(field_get:client_messages.HandleClientRequest.requestid)
  return requestid_;
}
inline void HandleClientRequest::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  requestid_ = value;
  // @@protoc_insertion_point(field_set:client_messages.HandleClientRequest.requestid)
}

// optional int64 expirerequestid = 5;
inline bool HandleClientRequest::has_expirerequestid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HandleClientRequest::clear_expirerequestid() {
  expirerequestid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HandleClientRequest::expirerequestid() const {
  // @@protoc_insertion_point(field_get:client_messages.HandleClientRequest.expirerequestid)
  return expirerequestid_;
}
inline void HandleClientRequest::set_expirerequestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  expirerequestid_ = value;
  // @@protoc_insertion_point(field_set:client_messages.HandleClientRequest.expirerequestid)
}

// optional int64 clientid = 6;
inline bool HandleClientRequest::has_clientid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HandleClientRequest::clear_clientid() {
  clientid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HandleClientRequest::clientid() const {
  // @@protoc_insertion_point(field_get:client_messages.HandleClientRequest.clientid)
  return clientid_;
}
inline void HandleClientRequest::set_clientid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  clientid_ = value;
  // @@protoc_insertion_point(field_set:client_messages.HandleClientRequest.clientid)
}

// -------------------------------------------------------------------

// HandleClientResponse

// required int32 flag = 1;
inline bool HandleClientResponse::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HandleClientResponse::clear_flag() {
  flag_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HandleClientResponse::flag() const {
  // @@protoc_insertion_point(field_get:client_messages.HandleClientResponse.flag)
  return flag_;
}
inline void HandleClientResponse::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  flag_ = value;
  // @@protoc_insertion_point(field_set:client_messages.HandleClientResponse.flag)
}

// optional string leader_name = 2;
inline bool HandleClientResponse::has_leader_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HandleClientResponse::clear_leader_name() {
  leader_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HandleClientResponse::leader_name() const {
  // @@protoc_insertion_point(field_get:client_messages.HandleClientResponse.leader_name)
  return leader_name_.GetNoArena();
}
inline void HandleClientResponse::set_leader_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  leader_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_messages.HandleClientResponse.leader_name)
}
inline void HandleClientResponse::set_leader_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  leader_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:client_messages.HandleClientResponse.leader_name)
}
inline void HandleClientResponse::set_leader_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  leader_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_messages.HandleClientResponse.leader_name)
}
inline void HandleClientResponse::set_leader_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  leader_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_messages.HandleClientResponse.leader_name)
}
inline std::string* HandleClientResponse::mutable_leader_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:client_messages.HandleClientResponse.leader_name)
  return leader_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HandleClientResponse::release_leader_name() {
  // @@protoc_insertion_point(field_release:client_messages.HandleClientResponse.leader_name)
  if (!has_leader_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return leader_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HandleClientResponse::set_allocated_leader_name(std::string* leader_name) {
  if (leader_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  leader_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader_name);
  // @@protoc_insertion_point(field_set_allocated:client_messages.HandleClientResponse.leader_name)
}

// optional string value = 3;
inline bool HandleClientResponse::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HandleClientResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HandleClientResponse::value() const {
  // @@protoc_insertion_point(field_get:client_messages.HandleClientResponse.value)
  return value_.GetNoArena();
}
inline void HandleClientResponse::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:client_messages.HandleClientResponse.value)
}
inline void HandleClientResponse::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:client_messages.HandleClientResponse.value)
}
inline void HandleClientResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:client_messages.HandleClientResponse.value)
}
inline void HandleClientResponse::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:client_messages.HandleClientResponse.value)
}
inline std::string* HandleClientResponse::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:client_messages.HandleClientResponse.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HandleClientResponse::release_value() {
  // @@protoc_insertion_point(field_release:client_messages.HandleClientResponse.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HandleClientResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:client_messages.HandleClientResponse.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace client_messages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fmessages_2eproto
