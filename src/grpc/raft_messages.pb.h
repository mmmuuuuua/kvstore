// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_5fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_5fmessages_2eproto;
namespace raft_messages {
class AppendEntriesRequest;
class AppendEntriesRequestDefaultTypeInternal;
extern AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
class AppendEntriesResponse;
class AppendEntriesResponseDefaultTypeInternal;
extern AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
class ConfRecord;
class ConfRecordDefaultTypeInternal;
extern ConfRecordDefaultTypeInternal _ConfRecord_default_instance_;
class InstallSnapshotRequest;
class InstallSnapshotRequestDefaultTypeInternal;
extern InstallSnapshotRequestDefaultTypeInternal _InstallSnapshotRequest_default_instance_;
class InstallSnapshotResponse;
class InstallSnapshotResponseDefaultTypeInternal;
extern InstallSnapshotResponseDefaultTypeInternal _InstallSnapshotResponse_default_instance_;
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class PersistRecord;
class PersistRecordDefaultTypeInternal;
extern PersistRecordDefaultTypeInternal _PersistRecord_default_instance_;
class RequestVoteRequest;
class RequestVoteRequestDefaultTypeInternal;
extern RequestVoteRequestDefaultTypeInternal _RequestVoteRequest_default_instance_;
class RequestVoteResponse;
class RequestVoteResponseDefaultTypeInternal;
extern RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
}  // namespace raft_messages
PROTOBUF_NAMESPACE_OPEN
template<> ::raft_messages::AppendEntriesRequest* Arena::CreateMaybeMessage<::raft_messages::AppendEntriesRequest>(Arena*);
template<> ::raft_messages::AppendEntriesResponse* Arena::CreateMaybeMessage<::raft_messages::AppendEntriesResponse>(Arena*);
template<> ::raft_messages::ConfRecord* Arena::CreateMaybeMessage<::raft_messages::ConfRecord>(Arena*);
template<> ::raft_messages::InstallSnapshotRequest* Arena::CreateMaybeMessage<::raft_messages::InstallSnapshotRequest>(Arena*);
template<> ::raft_messages::InstallSnapshotResponse* Arena::CreateMaybeMessage<::raft_messages::InstallSnapshotResponse>(Arena*);
template<> ::raft_messages::LogEntry* Arena::CreateMaybeMessage<::raft_messages::LogEntry>(Arena*);
template<> ::raft_messages::PersistRecord* Arena::CreateMaybeMessage<::raft_messages::PersistRecord>(Arena*);
template<> ::raft_messages::RequestVoteRequest* Arena::CreateMaybeMessage<::raft_messages::RequestVoteRequest>(Arena*);
template<> ::raft_messages::RequestVoteResponse* Arena::CreateMaybeMessage<::raft_messages::RequestVoteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raft_messages {

// ===================================================================

class LogEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_messages.LogEntry) */ {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogEntry* other);
  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(nullptr);
  }

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_messages.LogEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fmessages_2eproto);
    return ::descriptor_table_raft_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // optional string key = 5;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 5;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // optional string value = 6;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 6;
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // required int64 index = 1;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required uint64 term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 requestid = 7;
  bool has_requestid() const;
  void clear_requestid();
  static const int kRequestidFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 expirerequestid = 8;
  bool has_expirerequestid() const;
  void clear_expirerequestid();
  static const int kExpirerequestidFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int64 expirerequestid() const;
  void set_expirerequestid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 command = 3;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:raft_messages.LogEntry)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int64 expirerequestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 command_;
  friend struct ::TableStruct_raft_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_messages.AppendEntriesRequest) */ {
 public:
  AppendEntriesRequest();
  virtual ~AppendEntriesRequest();

  AppendEntriesRequest(const AppendEntriesRequest& from);
  AppendEntriesRequest(AppendEntriesRequest&& from) noexcept
    : AppendEntriesRequest() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesRequest& operator=(AppendEntriesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest*>(
               &_AppendEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AppendEntriesRequest* other);
  friend void swap(AppendEntriesRequest& a, AppendEntriesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesRequest* New() const final {
    return CreateMaybeMessage<AppendEntriesRequest>(nullptr);
  }

  AppendEntriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesRequest& from);
  void MergeFrom(const AppendEntriesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_messages.AppendEntriesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fmessages_2eproto);
    return ::descriptor_table_raft_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raft_messages.LogEntry entries = 6;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 6;
  ::raft_messages::LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_messages::LogEntry >*
      mutable_entries();
  const ::raft_messages::LogEntry& entries(int index) const;
  ::raft_messages::LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_messages::LogEntry >&
      entries() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required uint64 term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required int64 prev_log_index = 3;
  bool has_prev_log_index() const;
  void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 prev_log_index() const;
  void set_prev_log_index(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required uint64 prev_log_term = 4;
  bool has_prev_log_term() const;
  void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_log_term() const;
  void set_prev_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required int64 leader_commit = 5;
  bool has_leader_commit() const;
  void clear_leader_commit();
  static const int kLeaderCommitFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int64 leader_commit() const;
  void set_leader_commit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required uint64 time = 7;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint64 seq = 8;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required bool initial = 9;
  bool has_initial() const;
  void clear_initial();
  static const int kInitialFieldNumber = 9;
  bool initial() const;
  void set_initial(bool value);

  // @@protoc_insertion_point(class_scope:raft_messages.AppendEntriesRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_messages::LogEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 prev_log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_log_term_;
  ::PROTOBUF_NAMESPACE_ID::int64 leader_commit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  bool initial_;
  friend struct ::TableStruct_raft_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_messages.AppendEntriesResponse) */ {
 public:
  AppendEntriesResponse();
  virtual ~AppendEntriesResponse();

  AppendEntriesResponse(const AppendEntriesResponse& from);
  AppendEntriesResponse(AppendEntriesResponse&& from) noexcept
    : AppendEntriesResponse() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesResponse& operator=(AppendEntriesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResponse*>(
               &_AppendEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AppendEntriesResponse* other);
  friend void swap(AppendEntriesResponse& a, AppendEntriesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesResponse* New() const final {
    return CreateMaybeMessage<AppendEntriesResponse>(nullptr);
  }

  AppendEntriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesResponse& from);
  void MergeFrom(const AppendEntriesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_messages.AppendEntriesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fmessages_2eproto);
    return ::descriptor_table_raft_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required uint64 term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required int64 last_log_index = 4;
  bool has_last_log_index() const;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 last_log_index() const;
  void set_last_log_index(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required uint64 last_log_term = 5;
  bool has_last_log_term() const;
  void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_log_term() const;
  void set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint64 time = 6;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint64 seq = 7;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required bool success = 3;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 3;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:raft_messages.AppendEntriesResponse)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_log_term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  bool success_;
  friend struct ::TableStruct_raft_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_messages.RequestVoteRequest) */ {
 public:
  RequestVoteRequest();
  virtual ~RequestVoteRequest();

  RequestVoteRequest(const RequestVoteRequest& from);
  RequestVoteRequest(RequestVoteRequest&& from) noexcept
    : RequestVoteRequest() {
    *this = ::std::move(from);
  }

  inline RequestVoteRequest& operator=(const RequestVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteRequest& operator=(RequestVoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteRequest* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRequest*>(
               &_RequestVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RequestVoteRequest* other);
  friend void swap(RequestVoteRequest& a, RequestVoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteRequest* New() const final {
    return CreateMaybeMessage<RequestVoteRequest>(nullptr);
  }

  RequestVoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteRequest& from);
  void MergeFrom(const RequestVoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_messages.RequestVoteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fmessages_2eproto);
    return ::descriptor_table_raft_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required uint64 term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required int64 last_log_index = 3;
  bool has_last_log_index() const;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 last_log_index() const;
  void set_last_log_index(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required uint64 last_log_term = 4;
  bool has_last_log_term() const;
  void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_log_term() const;
  void set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint64 time = 5;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint64 seq = 6;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required bool initial = 7;
  bool has_initial() const;
  void clear_initial();
  static const int kInitialFieldNumber = 7;
  bool initial() const;
  void set_initial(bool value);

  // @@protoc_insertion_point(class_scope:raft_messages.RequestVoteRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_log_term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  bool initial_;
  friend struct ::TableStruct_raft_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_messages.RequestVoteResponse) */ {
 public:
  RequestVoteResponse();
  virtual ~RequestVoteResponse();

  RequestVoteResponse(const RequestVoteResponse& from);
  RequestVoteResponse(RequestVoteResponse&& from) noexcept
    : RequestVoteResponse() {
    *this = ::std::move(from);
  }

  inline RequestVoteResponse& operator=(const RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResponse& operator=(RequestVoteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteResponse* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResponse*>(
               &_RequestVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RequestVoteResponse* other);
  friend void swap(RequestVoteResponse& a, RequestVoteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteResponse* New() const final {
    return CreateMaybeMessage<RequestVoteResponse>(nullptr);
  }

  RequestVoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteResponse& from);
  void MergeFrom(const RequestVoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_messages.RequestVoteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fmessages_2eproto);
    return ::descriptor_table_raft_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required uint64 term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint64 time = 4;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint64 seq = 5;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required bool vote_granted = 3;
  bool has_vote_granted() const;
  void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 3;
  bool vote_granted() const;
  void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:raft_messages.RequestVoteResponse)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  bool vote_granted_;
  friend struct ::TableStruct_raft_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapshotRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_messages.InstallSnapshotRequest) */ {
 public:
  InstallSnapshotRequest();
  virtual ~InstallSnapshotRequest();

  InstallSnapshotRequest(const InstallSnapshotRequest& from);
  InstallSnapshotRequest(InstallSnapshotRequest&& from) noexcept
    : InstallSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotRequest& operator=(const InstallSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapshotRequest& operator=(InstallSnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstallSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstallSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotRequest*>(
               &_InstallSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(InstallSnapshotRequest* other);
  friend void swap(InstallSnapshotRequest& a, InstallSnapshotRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstallSnapshotRequest* New() const final {
    return CreateMaybeMessage<InstallSnapshotRequest>(nullptr);
  }

  InstallSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstallSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstallSnapshotRequest& from);
  void MergeFrom(const InstallSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_messages.InstallSnapshotRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fmessages_2eproto);
    return ::descriptor_table_raft_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required bytes data = 6;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // required uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required int64 last_included_index = 3;
  bool has_last_included_index() const;
  void clear_last_included_index();
  static const int kLastIncludedIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 last_included_index() const;
  void set_last_included_index(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 last_included_term = 4;
  bool has_last_included_term() const;
  void clear_last_included_term();
  static const int kLastIncludedTermFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 last_included_term() const;
  void set_last_included_term(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required uint64 time = 7;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint64 seq = 8;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required bool initial = 9;
  bool has_initial() const;
  void clear_initial();
  static const int kInitialFieldNumber = 9;
  bool initial() const;
  void set_initial(bool value);

  // @@protoc_insertion_point(class_scope:raft_messages.InstallSnapshotRequest)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_included_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_included_term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  bool initial_;
  friend struct ::TableStruct_raft_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapshotResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_messages.InstallSnapshotResponse) */ {
 public:
  InstallSnapshotResponse();
  virtual ~InstallSnapshotResponse();

  InstallSnapshotResponse(const InstallSnapshotResponse& from);
  InstallSnapshotResponse(InstallSnapshotResponse&& from) noexcept
    : InstallSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotResponse& operator=(const InstallSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapshotResponse& operator=(InstallSnapshotResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstallSnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstallSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotResponse*>(
               &_InstallSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(InstallSnapshotResponse* other);
  friend void swap(InstallSnapshotResponse& a, InstallSnapshotResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstallSnapshotResponse* New() const final {
    return CreateMaybeMessage<InstallSnapshotResponse>(nullptr);
  }

  InstallSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstallSnapshotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstallSnapshotResponse& from);
  void MergeFrom(const InstallSnapshotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_messages.InstallSnapshotResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fmessages_2eproto);
    return ::descriptor_table_raft_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required int64 last_included_index = 3;
  bool has_last_included_index() const;
  void clear_last_included_index();
  static const int kLastIncludedIndexFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 last_included_index() const;
  void set_last_included_index(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 last_included_term = 4;
  bool has_last_included_term() const;
  void clear_last_included_term();
  static const int kLastIncludedTermFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 last_included_term() const;
  void set_last_included_term(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required uint64 time = 6;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint64 seq = 7;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required bool success = 5;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 5;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:raft_messages.InstallSnapshotResponse)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_included_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_included_term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 seq_;
  bool success_;
  friend struct ::TableStruct_raft_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ConfRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_messages.ConfRecord) */ {
 public:
  ConfRecord();
  virtual ~ConfRecord();

  ConfRecord(const ConfRecord& from);
  ConfRecord(ConfRecord&& from) noexcept
    : ConfRecord() {
    *this = ::std::move(from);
  }

  inline ConfRecord& operator=(const ConfRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfRecord& operator=(ConfRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfRecord* internal_default_instance() {
    return reinterpret_cast<const ConfRecord*>(
               &_ConfRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ConfRecord* other);
  friend void swap(ConfRecord& a, ConfRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfRecord* New() const final {
    return CreateMaybeMessage<ConfRecord>(nullptr);
  }

  ConfRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfRecord& from);
  void MergeFrom(const ConfRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_messages.ConfRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fmessages_2eproto);
    return ::descriptor_table_raft_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string peers = 1;
  bool has_peers() const;
  void clear_peers();
  static const int kPeersFieldNumber = 1;
  const std::string& peers() const;
  void set_peers(const std::string& value);
  void set_peers(std::string&& value);
  void set_peers(const char* value);
  void set_peers(const char* value, size_t size);
  std::string* mutable_peers();
  std::string* release_peers();
  void set_allocated_peers(std::string* peers);

  // required int64 index = 2;
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 index2 = 3;
  bool has_index2() const;
  void clear_index2();
  static const int kIndex2FieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 index2() const;
  void set_index2(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 state = 4;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:raft_messages.ConfRecord)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peers_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_;
  ::PROTOBUF_NAMESPACE_ID::int64 index2_;
  ::PROTOBUF_NAMESPACE_ID::int64 state_;
  friend struct ::TableStruct_raft_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class PersistRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft_messages.PersistRecord) */ {
 public:
  PersistRecord();
  virtual ~PersistRecord();

  PersistRecord(const PersistRecord& from);
  PersistRecord(PersistRecord&& from) noexcept
    : PersistRecord() {
    *this = ::std::move(from);
  }

  inline PersistRecord& operator=(const PersistRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersistRecord& operator=(PersistRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PersistRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PersistRecord* internal_default_instance() {
    return reinterpret_cast<const PersistRecord*>(
               &_PersistRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PersistRecord* other);
  friend void swap(PersistRecord& a, PersistRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PersistRecord* New() const final {
    return CreateMaybeMessage<PersistRecord>(nullptr);
  }

  PersistRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PersistRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PersistRecord& from);
  void MergeFrom(const PersistRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersistRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft_messages.PersistRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_5fmessages_2eproto);
    return ::descriptor_table_raft_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raft_messages.LogEntry entries = 4;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 4;
  ::raft_messages::LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_messages::LogEntry >*
      mutable_entries();
  const ::raft_messages::LogEntry& entries(int index) const;
  ::raft_messages::LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_messages::LogEntry >&
      entries() const;

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required string vote_for = 3;
  bool has_vote_for() const;
  void clear_vote_for();
  static const int kVoteForFieldNumber = 3;
  const std::string& vote_for() const;
  void set_vote_for(const std::string& value);
  void set_vote_for(std::string&& value);
  void set_vote_for(const char* value);
  void set_vote_for(const char* value, size_t size);
  std::string* mutable_vote_for();
  std::string* release_vote_for();
  void set_allocated_vote_for(std::string* vote_for);

  // optional .raft_messages.ConfRecord conf_record = 5;
  bool has_conf_record() const;
  void clear_conf_record();
  static const int kConfRecordFieldNumber = 5;
  const ::raft_messages::ConfRecord& conf_record() const;
  ::raft_messages::ConfRecord* release_conf_record();
  ::raft_messages::ConfRecord* mutable_conf_record();
  void set_allocated_conf_record(::raft_messages::ConfRecord* conf_record);

  // required uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint64 last_seq = 6;
  bool has_last_seq() const;
  void clear_last_seq();
  static const int kLastSeqFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_seq() const;
  void set_last_seq(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_messages.PersistRecord)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_messages::LogEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vote_for_;
  ::raft_messages::ConfRecord* conf_record_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_seq_;
  friend struct ::TableStruct_raft_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogEntry

// required int64 index = 1;
inline bool LogEntry::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogEntry::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogEntry::index() const {
  // @@protoc_insertion_point(field_get:raft_messages.LogEntry.index)
  return index_;
}
inline void LogEntry::set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  index_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.LogEntry.index)
}

// required uint64 term = 2;
inline bool LogEntry::has_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogEntry::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogEntry::term() const {
  // @@protoc_insertion_point(field_get:raft_messages.LogEntry.term)
  return term_;
}
inline void LogEntry::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.LogEntry.term)
}

// required int32 command = 3;
inline bool LogEntry::has_command() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogEntry::clear_command() {
  command_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogEntry::command() const {
  // @@protoc_insertion_point(field_get:raft_messages.LogEntry.command)
  return command_;
}
inline void LogEntry::set_command(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  command_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.LogEntry.command)
}

// optional bytes data = 4;
inline bool LogEntry::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogEntry::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogEntry::data() const {
  // @@protoc_insertion_point(field_get:raft_messages.LogEntry.data)
  return data_.GetNoArena();
}
inline void LogEntry::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.LogEntry.data)
}
inline void LogEntry::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.LogEntry.data)
}
inline void LogEntry::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.LogEntry.data)
}
inline void LogEntry::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.LogEntry.data)
}
inline std::string* LogEntry::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:raft_messages.LogEntry.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogEntry::release_data() {
  // @@protoc_insertion_point(field_release:raft_messages.LogEntry.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.LogEntry.data)
}

// optional string key = 5;
inline bool LogEntry::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogEntry::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LogEntry::key() const {
  // @@protoc_insertion_point(field_get:raft_messages.LogEntry.key)
  return key_.GetNoArena();
}
inline void LogEntry::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.LogEntry.key)
}
inline void LogEntry::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.LogEntry.key)
}
inline void LogEntry::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.LogEntry.key)
}
inline void LogEntry::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.LogEntry.key)
}
inline std::string* LogEntry::mutable_key() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:raft_messages.LogEntry.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogEntry::release_key() {
  // @@protoc_insertion_point(field_release:raft_messages.LogEntry.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.LogEntry.key)
}

// optional string value = 6;
inline bool LogEntry::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogEntry::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LogEntry::value() const {
  // @@protoc_insertion_point(field_get:raft_messages.LogEntry.value)
  return value_.GetNoArena();
}
inline void LogEntry::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.LogEntry.value)
}
inline void LogEntry::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.LogEntry.value)
}
inline void LogEntry::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.LogEntry.value)
}
inline void LogEntry::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.LogEntry.value)
}
inline std::string* LogEntry::mutable_value() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:raft_messages.LogEntry.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogEntry::release_value() {
  // @@protoc_insertion_point(field_release:raft_messages.LogEntry.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.LogEntry.value)
}

// optional int64 requestid = 7;
inline bool LogEntry::has_requestid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogEntry::clear_requestid() {
  requestid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogEntry::requestid() const {
  // @@protoc_insertion_point(field_get:raft_messages.LogEntry.requestid)
  return requestid_;
}
inline void LogEntry::set_requestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  requestid_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.LogEntry.requestid)
}

// optional int64 expirerequestid = 8;
inline bool LogEntry::has_expirerequestid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogEntry::clear_expirerequestid() {
  expirerequestid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogEntry::expirerequestid() const {
  // @@protoc_insertion_point(field_get:raft_messages.LogEntry.expirerequestid)
  return expirerequestid_;
}
inline void LogEntry::set_expirerequestid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  expirerequestid_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.LogEntry.expirerequestid)
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// required string name = 1;
inline bool AppendEntriesRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppendEntriesRequest::name() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesRequest.name)
  return name_.GetNoArena();
}
inline void AppendEntriesRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesRequest.name)
}
inline void AppendEntriesRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.AppendEntriesRequest.name)
}
inline void AppendEntriesRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.AppendEntriesRequest.name)
}
inline void AppendEntriesRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.AppendEntriesRequest.name)
}
inline std::string* AppendEntriesRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:raft_messages.AppendEntriesRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppendEntriesRequest::release_name() {
  // @@protoc_insertion_point(field_release:raft_messages.AppendEntriesRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.AppendEntriesRequest.name)
}

// required uint64 term = 2;
inline bool AppendEntriesRequest::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesRequest::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesRequest.term)
  return term_;
}
inline void AppendEntriesRequest::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesRequest.term)
}

// required int64 prev_log_index = 3;
inline bool AppendEntriesRequest::has_prev_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntriesRequest::clear_prev_log_index() {
  prev_log_index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::prev_log_index() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesRequest.prev_log_index)
  return prev_log_index_;
}
inline void AppendEntriesRequest::set_prev_log_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  prev_log_index_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesRequest.prev_log_index)
}

// required uint64 prev_log_term = 4;
inline bool AppendEntriesRequest::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntriesRequest::clear_prev_log_term() {
  prev_log_term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesRequest::prev_log_term() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesRequest.prev_log_term)
  return prev_log_term_;
}
inline void AppendEntriesRequest::set_prev_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  prev_log_term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesRequest.prev_log_term)
}

// required int64 leader_commit = 5;
inline bool AppendEntriesRequest::has_leader_commit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppendEntriesRequest::clear_leader_commit() {
  leader_commit_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesRequest::leader_commit() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesRequest.leader_commit)
  return leader_commit_;
}
inline void AppendEntriesRequest::set_leader_commit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  leader_commit_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesRequest.leader_commit)
}

// repeated .raft_messages.LogEntry entries = 6;
inline int AppendEntriesRequest::entries_size() const {
  return entries_.size();
}
inline void AppendEntriesRequest::clear_entries() {
  entries_.Clear();
}
inline ::raft_messages::LogEntry* AppendEntriesRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raft_messages.AppendEntriesRequest.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_messages::LogEntry >*
AppendEntriesRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raft_messages.AppendEntriesRequest.entries)
  return &entries_;
}
inline const ::raft_messages::LogEntry& AppendEntriesRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesRequest.entries)
  return entries_.Get(index);
}
inline ::raft_messages::LogEntry* AppendEntriesRequest::add_entries() {
  // @@protoc_insertion_point(field_add:raft_messages.AppendEntriesRequest.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_messages::LogEntry >&
AppendEntriesRequest::entries() const {
  // @@protoc_insertion_point(field_list:raft_messages.AppendEntriesRequest.entries)
  return entries_;
}

// required uint64 time = 7;
inline bool AppendEntriesRequest::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppendEntriesRequest::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesRequest::time() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesRequest.time)
  return time_;
}
inline void AppendEntriesRequest::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  time_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesRequest.time)
}

// required uint64 seq = 8;
inline bool AppendEntriesRequest::has_seq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppendEntriesRequest::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesRequest::seq() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesRequest.seq)
  return seq_;
}
inline void AppendEntriesRequest::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesRequest.seq)
}

// required bool initial = 9;
inline bool AppendEntriesRequest::has_initial() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AppendEntriesRequest::clear_initial() {
  initial_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool AppendEntriesRequest::initial() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesRequest.initial)
  return initial_;
}
inline void AppendEntriesRequest::set_initial(bool value) {
  _has_bits_[0] |= 0x00000080u;
  initial_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesRequest.initial)
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// required string name = 1;
inline bool AppendEntriesResponse::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AppendEntriesResponse::name() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesResponse.name)
  return name_.GetNoArena();
}
inline void AppendEntriesResponse::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesResponse.name)
}
inline void AppendEntriesResponse::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.AppendEntriesResponse.name)
}
inline void AppendEntriesResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.AppendEntriesResponse.name)
}
inline void AppendEntriesResponse::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.AppendEntriesResponse.name)
}
inline std::string* AppendEntriesResponse::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:raft_messages.AppendEntriesResponse.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AppendEntriesResponse::release_name() {
  // @@protoc_insertion_point(field_release:raft_messages.AppendEntriesResponse.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.AppendEntriesResponse.name)
}

// required uint64 term = 2;
inline bool AppendEntriesResponse::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesResponse::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesResponse.term)
  return term_;
}
inline void AppendEntriesResponse::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesResponse.term)
}

// required bool success = 3;
inline bool AppendEntriesResponse::has_success() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppendEntriesResponse::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesResponse.success)
  return success_;
}
inline void AppendEntriesResponse::set_success(bool value) {
  _has_bits_[0] |= 0x00000040u;
  success_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesResponse.success)
}

// required int64 last_log_index = 4;
inline bool AppendEntriesResponse::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntriesResponse::clear_last_log_index() {
  last_log_index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppendEntriesResponse::last_log_index() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesResponse.last_log_index)
  return last_log_index_;
}
inline void AppendEntriesResponse::set_last_log_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesResponse.last_log_index)
}

// required uint64 last_log_term = 5;
inline bool AppendEntriesResponse::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntriesResponse::clear_last_log_term() {
  last_log_term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesResponse::last_log_term() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesResponse.last_log_term)
  return last_log_term_;
}
inline void AppendEntriesResponse::set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesResponse.last_log_term)
}

// required uint64 time = 6;
inline bool AppendEntriesResponse::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppendEntriesResponse::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesResponse::time() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesResponse.time)
  return time_;
}
inline void AppendEntriesResponse::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  time_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesResponse.time)
}

// required uint64 seq = 7;
inline bool AppendEntriesResponse::has_seq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppendEntriesResponse::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesResponse::seq() const {
  // @@protoc_insertion_point(field_get:raft_messages.AppendEntriesResponse.seq)
  return seq_;
}
inline void AppendEntriesResponse::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.AppendEntriesResponse.seq)
}

// -------------------------------------------------------------------

// RequestVoteRequest

// required string name = 1;
inline bool RequestVoteRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequestVoteRequest::name() const {
  // @@protoc_insertion_point(field_get:raft_messages.RequestVoteRequest.name)
  return name_.GetNoArena();
}
inline void RequestVoteRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.RequestVoteRequest.name)
}
inline void RequestVoteRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.RequestVoteRequest.name)
}
inline void RequestVoteRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.RequestVoteRequest.name)
}
inline void RequestVoteRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.RequestVoteRequest.name)
}
inline std::string* RequestVoteRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:raft_messages.RequestVoteRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestVoteRequest::release_name() {
  // @@protoc_insertion_point(field_release:raft_messages.RequestVoteRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.RequestVoteRequest.name)
}

// required uint64 term = 2;
inline bool RequestVoteRequest::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteRequest::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteRequest::term() const {
  // @@protoc_insertion_point(field_get:raft_messages.RequestVoteRequest.term)
  return term_;
}
inline void RequestVoteRequest::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.RequestVoteRequest.term)
}

// required int64 last_log_index = 3;
inline bool RequestVoteRequest::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestVoteRequest::clear_last_log_index() {
  last_log_index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RequestVoteRequest::last_log_index() const {
  // @@protoc_insertion_point(field_get:raft_messages.RequestVoteRequest.last_log_index)
  return last_log_index_;
}
inline void RequestVoteRequest::set_last_log_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.RequestVoteRequest.last_log_index)
}

// required uint64 last_log_term = 4;
inline bool RequestVoteRequest::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestVoteRequest::clear_last_log_term() {
  last_log_term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteRequest::last_log_term() const {
  // @@protoc_insertion_point(field_get:raft_messages.RequestVoteRequest.last_log_term)
  return last_log_term_;
}
inline void RequestVoteRequest::set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.RequestVoteRequest.last_log_term)
}

// required uint64 time = 5;
inline bool RequestVoteRequest::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestVoteRequest::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteRequest::time() const {
  // @@protoc_insertion_point(field_get:raft_messages.RequestVoteRequest.time)
  return time_;
}
inline void RequestVoteRequest::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  time_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.RequestVoteRequest.time)
}

// required uint64 seq = 6;
inline bool RequestVoteRequest::has_seq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestVoteRequest::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteRequest::seq() const {
  // @@protoc_insertion_point(field_get:raft_messages.RequestVoteRequest.seq)
  return seq_;
}
inline void RequestVoteRequest::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.RequestVoteRequest.seq)
}

// required bool initial = 7;
inline bool RequestVoteRequest::has_initial() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RequestVoteRequest::clear_initial() {
  initial_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool RequestVoteRequest::initial() const {
  // @@protoc_insertion_point(field_get:raft_messages.RequestVoteRequest.initial)
  return initial_;
}
inline void RequestVoteRequest::set_initial(bool value) {
  _has_bits_[0] |= 0x00000040u;
  initial_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.RequestVoteRequest.initial)
}

// -------------------------------------------------------------------

// RequestVoteResponse

// required string name = 1;
inline bool RequestVoteResponse::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequestVoteResponse::name() const {
  // @@protoc_insertion_point(field_get:raft_messages.RequestVoteResponse.name)
  return name_.GetNoArena();
}
inline void RequestVoteResponse::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.RequestVoteResponse.name)
}
inline void RequestVoteResponse::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.RequestVoteResponse.name)
}
inline void RequestVoteResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.RequestVoteResponse.name)
}
inline void RequestVoteResponse::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.RequestVoteResponse.name)
}
inline std::string* RequestVoteResponse::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:raft_messages.RequestVoteResponse.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestVoteResponse::release_name() {
  // @@protoc_insertion_point(field_release:raft_messages.RequestVoteResponse.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.RequestVoteResponse.name)
}

// required uint64 term = 2;
inline bool RequestVoteResponse::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteResponse::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:raft_messages.RequestVoteResponse.term)
  return term_;
}
inline void RequestVoteResponse::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.RequestVoteResponse.term)
}

// required bool vote_granted = 3;
inline bool RequestVoteResponse::has_vote_granted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestVoteResponse::clear_vote_granted() {
  vote_granted_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool RequestVoteResponse::vote_granted() const {
  // @@protoc_insertion_point(field_get:raft_messages.RequestVoteResponse.vote_granted)
  return vote_granted_;
}
inline void RequestVoteResponse::set_vote_granted(bool value) {
  _has_bits_[0] |= 0x00000010u;
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.RequestVoteResponse.vote_granted)
}

// required uint64 time = 4;
inline bool RequestVoteResponse::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestVoteResponse::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteResponse::time() const {
  // @@protoc_insertion_point(field_get:raft_messages.RequestVoteResponse.time)
  return time_;
}
inline void RequestVoteResponse::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.RequestVoteResponse.time)
}

// required uint64 seq = 5;
inline bool RequestVoteResponse::has_seq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestVoteResponse::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteResponse::seq() const {
  // @@protoc_insertion_point(field_get:raft_messages.RequestVoteResponse.seq)
  return seq_;
}
inline void RequestVoteResponse::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.RequestVoteResponse.seq)
}

// -------------------------------------------------------------------

// InstallSnapshotRequest

// required uint64 term = 1;
inline bool InstallSnapshotRequest::has_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstallSnapshotRequest::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstallSnapshotRequest::term() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotRequest.term)
  return term_;
}
inline void InstallSnapshotRequest::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotRequest.term)
}

// required string name = 2;
inline bool InstallSnapshotRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstallSnapshotRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InstallSnapshotRequest::name() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotRequest.name)
  return name_.GetNoArena();
}
inline void InstallSnapshotRequest::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotRequest.name)
}
inline void InstallSnapshotRequest::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.InstallSnapshotRequest.name)
}
inline void InstallSnapshotRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.InstallSnapshotRequest.name)
}
inline void InstallSnapshotRequest::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.InstallSnapshotRequest.name)
}
inline std::string* InstallSnapshotRequest::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:raft_messages.InstallSnapshotRequest.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstallSnapshotRequest::release_name() {
  // @@protoc_insertion_point(field_release:raft_messages.InstallSnapshotRequest.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstallSnapshotRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.InstallSnapshotRequest.name)
}

// required int64 last_included_index = 3;
inline bool InstallSnapshotRequest::has_last_included_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InstallSnapshotRequest::clear_last_included_index() {
  last_included_index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotRequest::last_included_index() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotRequest.last_included_index)
  return last_included_index_;
}
inline void InstallSnapshotRequest::set_last_included_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_included_index_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotRequest.last_included_index)
}

// required int64 last_included_term = 4;
inline bool InstallSnapshotRequest::has_last_included_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InstallSnapshotRequest::clear_last_included_term() {
  last_included_term_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotRequest::last_included_term() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotRequest.last_included_term)
  return last_included_term_;
}
inline void InstallSnapshotRequest::set_last_included_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  last_included_term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotRequest.last_included_term)
}

// required bytes data = 6;
inline bool InstallSnapshotRequest::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstallSnapshotRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InstallSnapshotRequest::data() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotRequest.data)
  return data_.GetNoArena();
}
inline void InstallSnapshotRequest::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotRequest.data)
}
inline void InstallSnapshotRequest::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.InstallSnapshotRequest.data)
}
inline void InstallSnapshotRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.InstallSnapshotRequest.data)
}
inline void InstallSnapshotRequest::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.InstallSnapshotRequest.data)
}
inline std::string* InstallSnapshotRequest::mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:raft_messages.InstallSnapshotRequest.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstallSnapshotRequest::release_data() {
  // @@protoc_insertion_point(field_release:raft_messages.InstallSnapshotRequest.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstallSnapshotRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.InstallSnapshotRequest.data)
}

// required uint64 time = 7;
inline bool InstallSnapshotRequest::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InstallSnapshotRequest::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstallSnapshotRequest::time() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotRequest.time)
  return time_;
}
inline void InstallSnapshotRequest::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  time_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotRequest.time)
}

// required uint64 seq = 8;
inline bool InstallSnapshotRequest::has_seq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InstallSnapshotRequest::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstallSnapshotRequest::seq() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotRequest.seq)
  return seq_;
}
inline void InstallSnapshotRequest::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotRequest.seq)
}

// required bool initial = 9;
inline bool InstallSnapshotRequest::has_initial() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InstallSnapshotRequest::clear_initial() {
  initial_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool InstallSnapshotRequest::initial() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotRequest.initial)
  return initial_;
}
inline void InstallSnapshotRequest::set_initial(bool value) {
  _has_bits_[0] |= 0x00000080u;
  initial_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotRequest.initial)
}

// -------------------------------------------------------------------

// InstallSnapshotResponse

// required uint64 term = 1;
inline bool InstallSnapshotResponse::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstallSnapshotResponse::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstallSnapshotResponse::term() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotResponse.term)
  return term_;
}
inline void InstallSnapshotResponse::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotResponse.term)
}

// required string name = 2;
inline bool InstallSnapshotResponse::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstallSnapshotResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InstallSnapshotResponse::name() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotResponse.name)
  return name_.GetNoArena();
}
inline void InstallSnapshotResponse::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotResponse.name)
}
inline void InstallSnapshotResponse::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.InstallSnapshotResponse.name)
}
inline void InstallSnapshotResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.InstallSnapshotResponse.name)
}
inline void InstallSnapshotResponse::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.InstallSnapshotResponse.name)
}
inline std::string* InstallSnapshotResponse::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:raft_messages.InstallSnapshotResponse.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstallSnapshotResponse::release_name() {
  // @@protoc_insertion_point(field_release:raft_messages.InstallSnapshotResponse.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstallSnapshotResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.InstallSnapshotResponse.name)
}

// required int64 last_included_index = 3;
inline bool InstallSnapshotResponse::has_last_included_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstallSnapshotResponse::clear_last_included_index() {
  last_included_index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotResponse::last_included_index() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotResponse.last_included_index)
  return last_included_index_;
}
inline void InstallSnapshotResponse::set_last_included_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  last_included_index_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotResponse.last_included_index)
}

// required int64 last_included_term = 4;
inline bool InstallSnapshotResponse::has_last_included_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InstallSnapshotResponse::clear_last_included_term() {
  last_included_term_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstallSnapshotResponse::last_included_term() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotResponse.last_included_term)
  return last_included_term_;
}
inline void InstallSnapshotResponse::set_last_included_term(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_included_term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotResponse.last_included_term)
}

// required bool success = 5;
inline bool InstallSnapshotResponse::has_success() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InstallSnapshotResponse::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool InstallSnapshotResponse::success() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotResponse.success)
  return success_;
}
inline void InstallSnapshotResponse::set_success(bool value) {
  _has_bits_[0] |= 0x00000040u;
  success_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotResponse.success)
}

// required uint64 time = 6;
inline bool InstallSnapshotResponse::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InstallSnapshotResponse::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstallSnapshotResponse::time() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotResponse.time)
  return time_;
}
inline void InstallSnapshotResponse::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  time_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotResponse.time)
}

// required uint64 seq = 7;
inline bool InstallSnapshotResponse::has_seq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InstallSnapshotResponse::clear_seq() {
  seq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstallSnapshotResponse::seq() const {
  // @@protoc_insertion_point(field_get:raft_messages.InstallSnapshotResponse.seq)
  return seq_;
}
inline void InstallSnapshotResponse::set_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  seq_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.InstallSnapshotResponse.seq)
}

// -------------------------------------------------------------------

// ConfRecord

// required string peers = 1;
inline bool ConfRecord::has_peers() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfRecord::clear_peers() {
  peers_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConfRecord::peers() const {
  // @@protoc_insertion_point(field_get:raft_messages.ConfRecord.peers)
  return peers_.GetNoArena();
}
inline void ConfRecord::set_peers(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  peers_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.ConfRecord.peers)
}
inline void ConfRecord::set_peers(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  peers_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.ConfRecord.peers)
}
inline void ConfRecord::set_peers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  peers_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.ConfRecord.peers)
}
inline void ConfRecord::set_peers(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  peers_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.ConfRecord.peers)
}
inline std::string* ConfRecord::mutable_peers() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:raft_messages.ConfRecord.peers)
  return peers_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfRecord::release_peers() {
  // @@protoc_insertion_point(field_release:raft_messages.ConfRecord.peers)
  if (!has_peers()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return peers_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfRecord::set_allocated_peers(std::string* peers) {
  if (peers != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  peers_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peers);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.ConfRecord.peers)
}

// required int64 index = 2;
inline bool ConfRecord::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfRecord::clear_index() {
  index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfRecord::index() const {
  // @@protoc_insertion_point(field_get:raft_messages.ConfRecord.index)
  return index_;
}
inline void ConfRecord::set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.ConfRecord.index)
}

// required int64 index2 = 3;
inline bool ConfRecord::has_index2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConfRecord::clear_index2() {
  index2_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfRecord::index2() const {
  // @@protoc_insertion_point(field_get:raft_messages.ConfRecord.index2)
  return index2_;
}
inline void ConfRecord::set_index2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  index2_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.ConfRecord.index2)
}

// required int64 state = 4;
inline bool ConfRecord::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConfRecord::clear_state() {
  state_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfRecord::state() const {
  // @@protoc_insertion_point(field_get:raft_messages.ConfRecord.state)
  return state_;
}
inline void ConfRecord::set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  state_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.ConfRecord.state)
}

// -------------------------------------------------------------------

// PersistRecord

// required uint64 term = 1;
inline bool PersistRecord::has_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PersistRecord::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PersistRecord::term() const {
  // @@protoc_insertion_point(field_get:raft_messages.PersistRecord.term)
  return term_;
}
inline void PersistRecord::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.PersistRecord.term)
}

// required string name = 2;
inline bool PersistRecord::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersistRecord::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PersistRecord::name() const {
  // @@protoc_insertion_point(field_get:raft_messages.PersistRecord.name)
  return name_.GetNoArena();
}
inline void PersistRecord::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.PersistRecord.name)
}
inline void PersistRecord::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.PersistRecord.name)
}
inline void PersistRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.PersistRecord.name)
}
inline void PersistRecord::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.PersistRecord.name)
}
inline std::string* PersistRecord::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:raft_messages.PersistRecord.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PersistRecord::release_name() {
  // @@protoc_insertion_point(field_release:raft_messages.PersistRecord.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PersistRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.PersistRecord.name)
}

// required string vote_for = 3;
inline bool PersistRecord::has_vote_for() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersistRecord::clear_vote_for() {
  vote_for_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PersistRecord::vote_for() const {
  // @@protoc_insertion_point(field_get:raft_messages.PersistRecord.vote_for)
  return vote_for_.GetNoArena();
}
inline void PersistRecord::set_vote_for(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  vote_for_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_messages.PersistRecord.vote_for)
}
inline void PersistRecord::set_vote_for(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  vote_for_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_messages.PersistRecord.vote_for)
}
inline void PersistRecord::set_vote_for(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  vote_for_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_messages.PersistRecord.vote_for)
}
inline void PersistRecord::set_vote_for(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  vote_for_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_messages.PersistRecord.vote_for)
}
inline std::string* PersistRecord::mutable_vote_for() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:raft_messages.PersistRecord.vote_for)
  return vote_for_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PersistRecord::release_vote_for() {
  // @@protoc_insertion_point(field_release:raft_messages.PersistRecord.vote_for)
  if (!has_vote_for()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return vote_for_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PersistRecord::set_allocated_vote_for(std::string* vote_for) {
  if (vote_for != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vote_for_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vote_for);
  // @@protoc_insertion_point(field_set_allocated:raft_messages.PersistRecord.vote_for)
}

// repeated .raft_messages.LogEntry entries = 4;
inline int PersistRecord::entries_size() const {
  return entries_.size();
}
inline void PersistRecord::clear_entries() {
  entries_.Clear();
}
inline ::raft_messages::LogEntry* PersistRecord::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raft_messages.PersistRecord.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_messages::LogEntry >*
PersistRecord::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raft_messages.PersistRecord.entries)
  return &entries_;
}
inline const ::raft_messages::LogEntry& PersistRecord::entries(int index) const {
  // @@protoc_insertion_point(field_get:raft_messages.PersistRecord.entries)
  return entries_.Get(index);
}
inline ::raft_messages::LogEntry* PersistRecord::add_entries() {
  // @@protoc_insertion_point(field_add:raft_messages.PersistRecord.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft_messages::LogEntry >&
PersistRecord::entries() const {
  // @@protoc_insertion_point(field_list:raft_messages.PersistRecord.entries)
  return entries_;
}

// optional .raft_messages.ConfRecord conf_record = 5;
inline bool PersistRecord::has_conf_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersistRecord::clear_conf_record() {
  if (conf_record_ != nullptr) conf_record_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::raft_messages::ConfRecord& PersistRecord::conf_record() const {
  const ::raft_messages::ConfRecord* p = conf_record_;
  // @@protoc_insertion_point(field_get:raft_messages.PersistRecord.conf_record)
  return p != nullptr ? *p : *reinterpret_cast<const ::raft_messages::ConfRecord*>(
      &::raft_messages::_ConfRecord_default_instance_);
}
inline ::raft_messages::ConfRecord* PersistRecord::release_conf_record() {
  // @@protoc_insertion_point(field_release:raft_messages.PersistRecord.conf_record)
  _has_bits_[0] &= ~0x00000004u;
  ::raft_messages::ConfRecord* temp = conf_record_;
  conf_record_ = nullptr;
  return temp;
}
inline ::raft_messages::ConfRecord* PersistRecord::mutable_conf_record() {
  _has_bits_[0] |= 0x00000004u;
  if (conf_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::raft_messages::ConfRecord>(GetArenaNoVirtual());
    conf_record_ = p;
  }
  // @@protoc_insertion_point(field_mutable:raft_messages.PersistRecord.conf_record)
  return conf_record_;
}
inline void PersistRecord::set_allocated_conf_record(::raft_messages::ConfRecord* conf_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete conf_record_;
  }
  if (conf_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      conf_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conf_record, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  conf_record_ = conf_record;
  // @@protoc_insertion_point(field_set_allocated:raft_messages.PersistRecord.conf_record)
}

// required uint64 last_seq = 6;
inline bool PersistRecord::has_last_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PersistRecord::clear_last_seq() {
  last_seq_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PersistRecord::last_seq() const {
  // @@protoc_insertion_point(field_get:raft_messages.PersistRecord.last_seq)
  return last_seq_;
}
inline void PersistRecord::set_last_seq(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  last_seq_ = value;
  // @@protoc_insertion_point(field_set:raft_messages.PersistRecord.last_seq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_messages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_5fmessages_2eproto
